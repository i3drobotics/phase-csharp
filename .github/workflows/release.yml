name: Release

on:
  workflow_dispatch:
    inputs:
        release_level:
          type: choice
          description: Release level
          options: 
          - patch
          - minor
          - major
          - prerelease
          required: true

env:
  PHASE_VERSION: v0.3.0
  PHASE_REPO: i3drobotics/phase

jobs:
  versioning:
    runs-on: ubuntu-20.04
    steps:
      # Get latest released version
      - uses: oprypin/find-latest-tag@v1
        with:
          repository: i3drobotics/phase-csharp  # The repository to scan.
          releases-only: true  # All relevant tags have a GitHub release for them.
        id: latest-tag  # The step ID to refer to later.
      # Generate new release version
      - name: Generate new version
        uses: actions-ecosystem/action-bump-semver@v1
        id: bump-version
        with:
          current_version: ${{ steps.latest-tag.outputs.tag }}
          level: ${{ github.event.inputs.release_level }}
      # Add generated version to VERSION file
      # remove 'v' character from version string
      - name: Add to Version file
        shell: bash
        run: |
          PROJ_VERSION=${{ steps.bump-version.outputs.new_version }}
          PROJ_VERSION=${PROJ_VERSION:1}
          echo "$PROJ_VERSION" > version.txt
      # Upload version file for use in other jobs
      - name: Archive version file
        uses: actions/upload-artifact@v2
        with:
          name: version-file-${{ github.sha }}-phase-csharp-release
          path: version.txt

  # Build / test
  build:
    needs: [versioning]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '5.0.408'
      # Get project version
      - name: Download version file artifact
        uses: actions/download-artifact@v2
        with:
          name: version-file-${{ github.sha }}-phase-csharp-release
          path: versioning
      - name: Get project version
        shell: bash
        run: |
          PROJ_VER=$(cat versioning/version.txt)
          echo "$PROJ_VER" > version.txt
          echo "PROJ_VER=$PROJ_VER" >> $GITHUB_ENV
      # Install Phase
      - name: Download Phase
        uses: robinraju/release-downloader@v1.3
        with:
          repository: ${{ env.PHASE_REPO }}
          tag: ${{ env.PHASE_VERSION }}
          fileName: phase-${{ env.PHASE_VERSION }}-windows-x86_64.zip
      - name: Install Phase
        shell: powershell
        run: |
          Expand-Archive -Path phase-${{ env.PHASE_VERSION }}-windows-x86_64.zip -DestinationPath "C:\Program Files\I3DR\Phase"
          Get-ChildItem -Path "C:\Program Files\I3DR\Phase"
          echo "C:\Program Files\I3DR\Phase\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      # Build
      - name: Build
        shell: bash
        run: |
          dotnet build --configuration Release //p:Version=${PROJ_VER}
        env:
          Phase_DIR: "C:\\Program Files\\I3DR\\Phase"
      # Unit Test
      - name: Unit Test
        shell: bash
        run: |
          dotnet test test/unit/phasecsharp-unit-test.csproj
          dotnet test test/perf/phasecsharp-perf-test.csproj
        env:
          Phase_DIR: "C:\\Program Files\\I3DR\\Phase"
      # Upload deployment artifact
      # (for data sharing across jobs)
      - name: Upload deployment artifact
        uses: actions/upload-artifact@v3
        with:
          name: deployment-windows-2019-${{ github.sha }}-phase-csharp-release
          path: deployment/bin

  deploy:
    needs: [build]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      # Get project version
      - name: Download version file artifact
        uses: actions/download-artifact@v2
        with:
          name: version-file-${{ github.sha }}-phase-csharp-release
          path: versioning
      - name: Get project version
        shell: bash
        run: |
          PROJ_VER=$(cat versioning/version.txt)
          echo "$PROJ_VER" > version.txt
          echo "PROJ_VER=$PROJ_VER" >> $GITHUB_ENV
      # Generate docs
      - name: Install Doxygen
        shell: bash
        run: |
          sudo apt update
          sudo apt install -y doxygen
      - name: Generate docs
        shell: bash
        run: |
          ./docs/gen_docs.sh
      # Zip docs
      - uses: papeloto/action-zip@v1
        with:
          files: deployment/docs/
          dest: docs.zip
      # Download deployments from build artifacts
      - name: Download deployment artifact
        uses: actions/download-artifact@v2
        with:
          name: deployment-windows-2019-${{ github.sha }}-phase-csharp-release
          path: deployment/bin
      # Zip binaries
      - uses: papeloto/action-zip@v1
        with:
          files: deployment/bin/
          dest: phase-csharp-v${{ env.PROJ_VER }}-windows-x86_64.zip
      # Create release
      - name: GitHub release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: ${{ github.event.inputs.release_level == 'prerelease' }}
          body_path: release.md
          tag_name: v${{ env.PROJ_VER }}
          files: |
            phase-csharp-v${{ env.PROJ_VER }}-windows-x86_64.zip
            docs.zip
      # Update public docs
      - name: Deploy public docs
        if: ${{ github.event.inputs.release_level != 'prerelease' }}
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          branch: docs # The branch the action should deploy to.
          folder: deployment/docs # The folder the action should deploy.
          repository-name: i3drobotics/phase-csharp
      # Get git variables
      - name: Get commit variables
        id: commit-vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      # Get release branch name
      # 'preprod' for pre-release
      # 'prod' for production release
      - name: Get release branch
        id: release-branch
        shell: bash
        run: |
          export RELEASE_BRANCH="prod"
          [[ ${{ github.event.inputs.release_level == 'prerelease' }} ]] && export RELEASE_BRANCH="preprod"
          echo "::set-output name=branch_name::${RELEASE_BRANCH}"
      # Merge branch into production
      - name: Merge main -> prod
        uses: devmasx/merge-branch@master
        with:
          type: now
          target_branch: ${{ steps.release-branch.outputs.branch_name }}
          github_token: ${{ github.token }}
          message: merged ${{ steps.commit-vars.outputs.sha_short }}

  cleanup:
      needs: [deploy]
      runs-on: ubuntu-20.04

      steps:
        - uses: geekyeggo/delete-artifact@v1
          with:
            name: |
              version-file-${{ github.sha }}-phase-csharp-release
              deployment-windows-2019-${{ github.sha }}-phase-csharp-release
